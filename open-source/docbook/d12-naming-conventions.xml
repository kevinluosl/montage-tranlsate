<sect1 id="命名规范">
  <title>命名规范</title>
  <para>
    这个文档总结MontageJS命名规范以及如何在模块、组件和CSS类名中使用。在构建应用或者提交代码到MontageJS框架时需要遵循这些规范。
  </para>
  <sect2 id="模块">
    <title>模块</title>
    <para>
      模块名由小写字母和数字组成，可以用中横线分割（如，<literal>child-package</literal>）；
    </para>
  </sect2>
  <sect2 id="组件.reel文件夹">
    <title>组件（.reel文件夹）</title>
    <para>
      组件存放在MontageJS项目的ui文件夹中，组件对应的文件夹名以.reel结尾。
    </para>
    <para>
      <literal>.reel</literal>文件夹名需要符合以下命名规范：
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          组件名是小写字母。
        </para>
      </listitem>
      <listitem>
        <para>
          可以用中横杠分割单词。例如：<literal>radio-button.reel</literal>，<literal>text-field.reel</literal>。
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="css类名">
    <title>CSS类名</title>
    <para>
      CSS类名遵循中横杠分割规范：<literal>package-Component</literal>，<literal>package-Component-childElement</literal>。
      类型和状态相关的样式使用双横杠。比如下面的Digit Progress组件：
    </para>
    <programlisting>
.digit-Progress          /* package-Component */
.digit-Progress-bar      /* package-Component-childElement */
.digit-Progress--small   /* package-Component--variation */
.digit-Progress--loading /* package-Component--state */
</programlisting>
    <para>
      更多规范：
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="strong">组件:</emphasis>
          CSS类命由包名(例如，<literal>montage-</literal>,
          <literal>digit-</literal>,
          <literal>matte-</literal>等等)+中横杠然后组件名首字母大写；例如一个按钮组件的CSS类名就是<literal>digit-Button</literal>:
        </para>
        <programlisting>
&lt;button class=&quot;digit-Button&quot;&gt;
</programlisting>
        <para>
          如果组件名是由多个单词组成，每个单词的首字母都需要大写。例如，`montage-InputRange。
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>复合组建:</literal> 组建中的子元素遵循以下规范：
        </para>
        <itemizedlist>
          <listitem>
            <para>
              如果一个组件有子元素，子元素名小写（用来区分父组件还是子组件），父元素与子元素用中横杠分割；例如,<literal>digit-Slider-thumb</literal>。
            </para>
          </listitem>
          <listitem>
            <para>
              如果子元素名由多个单词组成，子元素名用小写驼峰规则;例如，digit-Slider-thumbWithSpikyEars`。
            </para>
          </listitem>
          <listitem>
            <para>
              如果子元素多层次的，每一层用中横杠分割；例如，<literal>digit-Slider-thumb-nobs-centerNob</literal>（<emphasis>注意:</emphasis>
              一般不建议这样做，因为这样会让类名很长。只有在真正需要的时候使用。)）
            </para>
            <blockquote>
              <para>
                <emphasis role="strong">备注:</emphasis>
                从技术上是没有限制子元素层次数量，但是如果有很多层次的时候应该把子元素封装成单独的组建。
              </para>
            </blockquote>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">类型:</emphasis>
          如果组件有几种类型，用双横杠风格。例如：
          <literal>digit-Button--primary</literal>,
          <literal>digit-Slider--vertical</literal>。
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="strong">状态:</emphasis>
          如果组件有几种状态，用<literal>is-</literal>前缀；例如：<literal>is-hidden</literal>,
          <literal>is-active</literal>。
          这是为了说明组件有几种不同的状态，不应该全局设定。由组件内部控制：<literal>.Component.is-hidden { display: none; }</literal>。
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="理论基础">
    <title>理论基础</title>
    <para>
      MontageJS
      CSS命名规范借鉴<ulink url="http://bem.info/method/">BEM</ulink>方法论，然后在语法上做了一些小调整:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          在名字中包含包名是为了在应用中的多个包互相不冲突。
        </para>
      </listitem>
      <listitem>
        <para>
          使用中横杠（ -
          ）是为了在编写代码的时候能够双击一部分就能够全选然后编辑。（你可以试一下
          <literal>digit-Slider-thumb</literal> 和
          <literal>digit_Slider_thumb</literal>）
        </para>
      </listitem>
      <listitem>
        <para>
          组件名大写驼峰格式是为了区分组件/子组件之间的关系。
        </para>
      </listitem>
      <listitem>
        <para>
          子元素小写驼峰格式是为了增加可读性，同时也保证每个部分分组在一起。
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
</sect1>
