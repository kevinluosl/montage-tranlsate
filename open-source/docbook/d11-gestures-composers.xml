<sect1 id="gestures-composers">
  <title>Gestures &amp; Composers</title>
  <para>
    Montage使用<literal>Composer</literal>
    <ulink url="https://github.com/montagejs/montage/tree/master/composer">API</ulink>来支持常见的手势。
    比如与设备相关的<literal>DOM</literal>事件click和touch。<literal>Composer</literal>
    API把这两个事件抽象为一个press事件，这样你就不需要设置多个事件监听。Montage已经支持以下事件：
  </para>
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        press / long press
      </para>
    </listitem>
    <listitem>
      <para>
        swipe
      </para>
    </listitem>
    <listitem>
      <para>
        key press
      </para>
    </listitem>
    <listitem>
      <para>
        drag
      </para>
    </listitem>
  </itemizedlist>
  <sect2 id="presscomposer">
    <title><literal>PressComposer</literal></title>
    <para>
      Press Composer处理press和long
      press手势。把鼠标click和touch抽象为Montage事件。已经支持的事件包括：
    </para>
    <sect3 id="pressstart">
      <title><literal>pressStart</literal></title>
      <para>
        当组件的<literal>mousedown</literal>或者<literal>touchstart</literal>触发的时候会被发送。
      </para>
    </sect3>
    <sect3 id="press">
      <title><literal>press</literal></title>
      <para>
        触发时间是在<literal>pressStart</literal>事件发送之后，鼠标键弹起(<literal>mouseup</literal>
        事件) 或者手指离开屏幕（<literal>touchend</literal>事件）。
        这个事件也会在<literal>longPress</literal>发送之后触发，但是是可以被撤销的。
      </para>
    </sect3>
    <sect3 id="longpress">
      <title><literal>longPress</literal></title>
      <para>
        当一个<literal>press</literal>手势超过<literal>longPressTimeout</literal>指定的时间会发送
        <literal>longPress</literal>事件。如果要避免发送在<literal>longPress</literal>事件之后发送 <literal>press</literal>可以在<literal>longPressHandler</literal>中调用<literal>cancelPress()</literal>方法撤销<literal>press</literal>。
      </para>
    </sect3>
    <sect3 id="presscancel">
      <title><literal>pressCancel</literal></title>
      <para>
        当<literal>press</literal>被撤销之后会发送。两种方式可以撤销事件，一种是开发者调用<literal>cancelPress()</literal>方法，另外一种是其它的页面元素或者到事件焦点：
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            浏览器发送touch cancel 事件
          </para>
        </listitem>
        <listitem>
          <para>
            用户通过在页面元素上按下鼠标之后，把鼠标从元素上移开，然后弹起鼠标键
          </para>
        </listitem>
      </itemizedlist>
    </sect3>
    <sect3 id="press-and-longpress-手势实例">
      <title><literal>press</literal> and <literal>longPress</literal>
      手势实例</title>
      <para>
        我们用一个例子来展示
        <literal>press</literal>事件，在例子中当<literal>longPress</literal>事件触发之后会改变页面元素的颜色和文字，并且显示一个JavaScript
        <literal>alert</literal>弹出框。
      </para>
    </sect3>
    <sect3 id="组件设置">
      <title>组件设置</title>
      <para>
        在Montage开发中如果要使用一个功能，你首先需要在Javascript文件中导入相关的模块。press和long
        press都在press-composer模块中：
      </para>
      <programlisting>
var Montage = require(&quot;montage/core/core&quot;).Montage,
        Component = require(&quot;montage/ui/component&quot;).Component,
        PressComposer = require(&quot;montage/ui/composer/press-composer&quot;).PressComposer;

You then have to create and add the `PressComposer`:

    exports.PressExample = Montage.create(Component, {
     didCreate: {
        value: function() {
            this._pressComposer = PressComposer.create();
            this.addComposer(this._pressComposer);
        }
    }
});
</programlisting>
    </sect3>
  </sect2>
  <sect2 id="事件处理">
    <title>事件处理</title>
    <para>
      导入<literal>PressComposer</literal>之后我们就可以添加事件监听器。在这个例子中同时添加<literal>press</literal>和<literal>longPress</literal>事件监听器:
    </para>
    <programlisting>
prepareForActivationEvents: {
        value: function() {
            this._pressComposer.addEventListener(&quot;press&quot;, this, false);
            this._pressComposer.addEventListener(&quot;longPress&quot;, this, false);
        }
    }
    
</programlisting>
    <para>
      然后我们需要用Montage事件处理方式添加一个<literal>handle</literal>前缀的事件处理方法。
    </para>
    <para>
      我们用两个方式来响应<literal>press</literal>事件，
      一是修改元素的CSS来改变样式，另外一个是改变元素的<literal>innerHTML</literal>：
    </para>
    <programlisting>
handlePress: {
    value: function(event) {
        this.element.classList.toggle(&quot;press-active&quot;);
        if (this.element.classList.contains(&quot;press-active&quot;)) {
            this.element.innerHTML = &quot;I’m active!&quot;;
        } else {
            this.element.innerHTML = &quot;Now deactivated&quot;;
        }
    }
}
</programlisting>
    <para>
      <literal>longPress</literal>事件处理中弹出一个JavaScript
      <literal>alert</literal>对话框，并且撤销<literal>press</literal>事件：
    </para>
    <programlisting>
handleLongPress: {
    value: function(event) {
        this._pressComposer.cancelPress();
        alert(&quot;Long press event fired.&quot;);
   }
}
</programlisting>
    <para>
      在真实项目中你的案例可能是创建一个右键菜单来让用户使用。
    </para>
    <sect3 id="实现功能">
      <title>实现功能</title>
      <para>
        接下来你需要在模板中把HTML元素和JavaScript对象关联起来并定义CSS样式：
      </para>
      <para>
        HTML:
      </para>
      <programlisting>
&lt;div data-montage-id=&quot;pressme&quot; class=&quot;press-target&quot;&gt;
    Click or long click me!
&lt;/div&gt;
</programlisting>
      <para>
        Script:
      </para>
      <programlisting>
{
    &quot;pressExample&quot;: {
        &quot;prototype&quot;: &quot;PressExample&quot;,
        &quot;properties&quot;: {
            &quot;element&quot;: {&quot;#&quot;: &quot;pressme&quot;},
            &quot;hasTemplate&quot;: false
        }
    }
}
</programlisting>
      <para>
        如果你很快的点击元素<literal>handlePress</literal>被调用。如果你长按元素<literal>longPress</literal>被调用。
      </para>
    </sect3>
  </sect2>
  <sect2 id="swipecomposer">
    <title><literal>SwipeComposer</literal></title>
    <para>
      Montage当前只在手持设备上支持swipe手势，暂时还不支持桌面系统。<literal>SwipeComposer</literal>，还在不断的完善，为Montage正式版本做准备。
    </para>
  </sect2>
  <sect2 id="keycomposer">
    <title><literal>KeyComposer</literal></title>
    <para>
      TBD
    </para>
  </sect2>
  <sect2 id="translatecomposer">
    <title><literal>TranslateComposer</literal></title>
    <para>
      TBD
    </para>
  </sect2>
</sect1>
